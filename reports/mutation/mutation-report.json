{"files":{"src/controllers/write/topics.js":{"language":"javascript","mutants":[{"id":"0","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":19},"start":{"column":34,"line":13}}},{"id":"1","mutatorName":"BooleanLiteral","replacement":"topicData","status":"Survived","testsCompleted":9,"location":{"end":{"column":16,"line":15},"start":{"column":6,"line":15}}},{"id":"2","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":9,"location":{"end":{"column":16,"line":15},"start":{"column":6,"line":15}}},{"id":"3","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":9,"location":{"end":{"column":16,"line":15},"start":{"column":6,"line":15}}},{"id":"4","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":17},"start":{"column":18,"line":15}}},{"id":"5","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":9,"location":{"end":{"column":76,"line":16},"start":{"column":56,"line":16}}},{"id":"6","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":33},"start":{"column":37,"line":21}}},{"id":"7","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":9,"location":{"end":{"column":63,"line":22},"start":{"column":36,"line":22}}},{"id":"8","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":30},"start":{"column":6,"line":23}}},{"id":"10","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":9,"location":{"end":{"column":21,"line":25},"start":{"column":7,"line":25}}},{"id":"9","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":9,"location":{"end":{"column":21,"line":25},"start":{"column":7,"line":25}}},{"id":"12","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":4,"line":29},"start":{"column":10,"line":27}}},{"id":"11","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":4,"line":27},"start":{"column":23,"line":25}}},{"id":"14","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":9,"location":{"end":{"column":37,"line":31},"start":{"column":30,"line":31}}},{"id":"13","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":32},"start":{"column":12,"line":30}}},{"id":"15","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":43},"start":{"column":36,"line":35}}},{"id":"16","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":9,"location":{"end":{"column":63,"line":36},"start":{"column":36,"line":36}}},{"id":"18","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":83,"line":38},"start":{"column":47,"line":38}}},{"id":"17","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":40},"start":{"column":6,"line":37}}},{"id":"19","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":42},"start":{"column":12,"line":40}}},{"id":"20","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":9,"location":{"end":{"column":37,"line":41},"start":{"column":30,"line":41}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":53},"start":{"column":40,"line":45}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":9,"location":{"end":{"column":24,"line":46},"start":{"column":13,"line":46}}},{"id":"24","mutatorName":"EqualityOperator","replacement":"req.uid >= 0","status":"Survived","testsCompleted":9,"location":{"end":{"column":24,"line":46},"start":{"column":13,"line":46}}},{"id":"23","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":9,"location":{"end":{"column":24,"line":46},"start":{"column":13,"line":46}}},{"id":"25","mutatorName":"EqualityOperator","replacement":"req.uid <= 0","status":"Survived","testsCompleted":9,"location":{"end":{"column":24,"line":46},"start":{"column":13,"line":46}}},{"id":"26","mutatorName":"StringLiteral","replacement":"``","status":"Survived","testsCompleted":9,"location":{"end":{"column":30,"line":47},"start":{"column":16,"line":47}}},{"id":"27","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":9,"location":{"end":{"column":48,"line":48},"start":{"column":41,"line":48}}},{"id":"28","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":9,"location":{"end":{"column":15,"line":49},"start":{"column":6,"line":49}}},{"id":"30","mutatorName":"EqualityOperator","replacement":"count >= 1","status":"Survived","testsCompleted":9,"location":{"end":{"column":15,"line":49},"start":{"column":6,"line":49}}},{"id":"29","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":9,"location":{"end":{"column":15,"line":49},"start":{"column":6,"line":49}}},{"id":"32","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":51},"start":{"column":17,"line":49}}},{"id":"31","mutatorName":"EqualityOperator","replacement":"count <= 1","status":"Survived","testsCompleted":9,"location":{"end":{"column":15,"line":49},"start":{"column":6,"line":49}}},{"id":"33","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":58},"start":{"column":37,"line":55}}},{"id":"34","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":57,"line":56},"start":{"column":31,"line":56}}},{"id":"35","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","testsCompleted":9,"location":{"end":{"column":55,"line":56},"start":{"column":39,"line":56}}},{"id":"36","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":63},"start":{"column":38,"line":60}}},{"id":"38","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","testsCompleted":9,"location":{"end":{"column":56,"line":61},"start":{"column":40,"line":61}}},{"id":"37","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":58,"line":61},"start":{"column":32,"line":61}}},{"id":"39","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":68},"start":{"column":36,"line":65}}},{"id":"40","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":56,"line":66},"start":{"column":30,"line":66}}},{"id":"41","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","testsCompleted":9,"location":{"end":{"column":54,"line":66},"start":{"column":38,"line":66}}},{"id":"42","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":75},"start":{"column":34,"line":70}}},{"id":"43","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":62,"line":72},"start":{"column":28,"line":72}}},{"id":"44","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","testsCompleted":9,"location":{"end":{"column":52,"line":72},"start":{"column":36,"line":72}}},{"id":"45","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":80},"start":{"column":36,"line":77}}},{"id":"46","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":56,"line":78},"start":{"column":30,"line":78}}},{"id":"47","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","testsCompleted":9,"location":{"end":{"column":54,"line":78},"start":{"column":38,"line":78}}},{"id":"48","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":85},"start":{"column":35,"line":82}}},{"id":"50","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","testsCompleted":9,"location":{"end":{"column":53,"line":83},"start":{"column":37,"line":83}}},{"id":"49","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":55,"line":83},"start":{"column":29,"line":83}}},{"id":"51","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":90},"start":{"column":37,"line":87}}},{"id":"52","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":57,"line":88},"start":{"column":31,"line":88}}},{"id":"54","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":95},"start":{"column":37,"line":92}}},{"id":"53","mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived","testsCompleted":9,"location":{"end":{"column":55,"line":88},"start":{"column":39,"line":88}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":100},"start":{"column":37,"line":97}}},{"id":"56","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":105},"start":{"column":39,"line":102}}},{"id":"57","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":113},"start":{"column":41,"line":107}}},{"id":"58","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":111},"start":{"column":51,"line":108}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":122},"start":{"column":38,"line":115}}},{"id":"60","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":119},"start":{"column":48,"line":116}}},{"id":"62","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":58,"line":125},"start":{"column":35,"line":125}}},{"id":"61","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":127},"start":{"column":41,"line":124}}},{"id":"63","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":133},"start":{"column":40,"line":129}}},{"id":"64","mutatorName":"BooleanLiteral","replacement":"!parseInt(thumbsOnly, 10)","status":"Survived","testsCompleted":9,"location":{"end":{"column":54,"line":131},"start":{"column":28,"line":131}}},{"id":"66","mutatorName":"BooleanLiteral","replacement":"true","status":"Survived","testsCompleted":9,"location":{"end":{"column":62,"line":131},"start":{"column":57,"line":131}}},{"id":"65","mutatorName":"BooleanLiteral","replacement":"parseInt(thumbsOnly, 10)","status":"Survived","testsCompleted":9,"location":{"end":{"column":54,"line":131},"start":{"column":29,"line":131}}},{"id":"68","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":150},"start":{"column":39,"line":135}}},{"id":"67","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":99,"line":132},"start":{"column":70,"line":132}}},{"id":"69","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":83,"line":137},"start":{"column":41,"line":137}}},{"id":"70","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":9,"location":{"end":{"column":27,"line":142},"start":{"column":6,"line":142}}},{"id":"72","mutatorName":"LogicalOperator","replacement":"files || files.length","status":"Survived","testsCompleted":9,"location":{"end":{"column":27,"line":142},"start":{"column":6,"line":142}}},{"id":"71","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":9,"location":{"end":{"column":27,"line":142},"start":{"column":6,"line":142}}},{"id":"74","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":4,"line":148},"start":{"column":50,"line":143}}},{"id":"73","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":149},"start":{"column":29,"line":142}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":5,"line":147},"start":{"column":34,"line":144}}},{"id":"76","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":159},"start":{"column":44,"line":152}}},{"id":"77","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":156},"start":{"column":38,"line":153}}},{"id":"78","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":91,"line":158},"start":{"column":70,"line":158}}},{"id":"80","mutatorName":"BooleanLiteral","replacement":"req.body.path.startsWith('http')","status":"Survived","testsCompleted":9,"location":{"end":{"column":39,"line":162},"start":{"column":6,"line":162}}},{"id":"79","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":174},"start":{"column":42,"line":161}}},{"id":"81","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":9,"location":{"end":{"column":39,"line":162},"start":{"column":6,"line":162}}},{"id":"82","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":9,"location":{"end":{"column":39,"line":162},"start":{"column":6,"line":162}}},{"id":"84","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":9,"location":{"end":{"column":38,"line":162},"start":{"column":32,"line":162}}},{"id":"83","mutatorName":"MethodExpression","replacement":"req.body.path.endsWith('http')","status":"Survived","testsCompleted":9,"location":{"end":{"column":39,"line":162},"start":{"column":7,"line":162}}},{"id":"85","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":167},"start":{"column":41,"line":162}}},{"id":"86","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":9,"location":{"end":{"column":22,"line":164},"start":{"column":7,"line":164}}},{"id":"87","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":9,"location":{"end":{"column":22,"line":164},"start":{"column":7,"line":164}}},{"id":"88","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":4,"line":166},"start":{"column":24,"line":164}}},{"id":"90","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":185},"start":{"column":44,"line":176}}},{"id":"89","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":172},"start":{"column":36,"line":169}}},{"id":"91","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":3,"line":182},"start":{"column":38,"line":178}}},{"id":"92","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":191},"start":{"column":40,"line":187}}},{"id":"94","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":48,"line":190},"start":{"column":38,"line":190}}},{"id":"93","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":66,"line":188},"start":{"column":49,"line":188}}},{"id":"96","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":53,"line":194},"start":{"column":36,"line":194}}},{"id":"95","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":197},"start":{"column":42,"line":193}}},{"id":"97","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":203},"start":{"column":39,"line":199}}},{"id":"98","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":50,"line":200},"start":{"column":33,"line":200}}},{"id":"99","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":209},"start":{"column":41,"line":205}}},{"id":"100","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":52,"line":206},"start":{"column":35,"line":206}}},{"id":"102","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":46,"line":212},"start":{"column":29,"line":212}}},{"id":"101","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":215},"start":{"column":35,"line":211}}},{"id":"104","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":51,"line":219},"start":{"column":29,"line":219}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":222},"start":{"column":35,"line":217}}},{"id":"105","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":227},"start":{"column":38,"line":224}}},{"id":"106","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":71,"line":225},"start":{"column":48,"line":225}}},{"id":"108","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":73,"line":230},"start":{"column":50,"line":230}}},{"id":"107","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":9,"location":{"end":{"column":2,"line":232},"start":{"column":40,"line":229}}}],"source":"'use strict';\n\nconst db = require('../../database');\nconst api = require('../../api');\nconst topics = require('../../topics');\n\nconst helpers = require('../helpers');\nconst middleware = require('../../middleware');\nconst uploadsController = require('../uploads');\n\nconst Topics = module.exports;\n\nTopics.get = async (req, res) => {\n\tconst topicData = await api.topics.get(req, req.params);\n\tif (!topicData) {\n\t\treturn helpers.formatApiResponse(404, res, new Error('[[error:no-topic]]'));\n\t}\n\thelpers.formatApiResponse(200, res, topicData);\n};\n\nTopics.create = async (req, res) => {\n\tconst id = await lockPosting(req, '[[error:already-posting]]');\n\ttry {\n\t\tconst payload = await api.topics.create(req, req.body);\n\t\tif (payload.queued) {\n\t\t\thelpers.formatApiResponse(202, res, payload);\n\t\t} else {\n\t\t\thelpers.formatApiResponse(200, res, payload);\n\t\t}\n\t} finally {\n\t\tawait db.deleteObjectField('locks', id);\n\t}\n};\n\nTopics.reply = async (req, res) => {\n\tconst id = await lockPosting(req, '[[error:already-posting]]');\n\ttry {\n\t\tconst payload = await api.topics.reply(req, { ...req.body, tid: req.params.tid });\n\t\thelpers.formatApiResponse(200, res, payload);\n\t} finally {\n\t\tawait db.deleteObjectField('locks', id);\n\t}\n};\n\nasync function lockPosting(req, error) {\n\tconst id = req.uid > 0 ? req.uid : req.sessionID;\n\tconst value = `posting${id}`;\n\tconst count = await db.incrObjectField('locks', value);\n\tif (count > 1) {\n\t\tthrow new Error(error);\n\t}\n\treturn value;\n}\n\nTopics.delete = async (req, res) => {\n\tawait api.topics.delete(req, { tids: [req.params.tid] });\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.restore = async (req, res) => {\n\tawait api.topics.restore(req, { tids: [req.params.tid] });\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.purge = async (req, res) => {\n\tawait api.topics.purge(req, { tids: [req.params.tid] });\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.pin = async (req, res) => {\n\tconst { expiry } = req.body;\n\tawait api.topics.pin(req, { tids: [req.params.tid], expiry });\n\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.unpin = async (req, res) => {\n\tawait api.topics.unpin(req, { tids: [req.params.tid] });\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.lock = async (req, res) => {\n\tawait api.topics.lock(req, { tids: [req.params.tid] });\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.unlock = async (req, res) => {\n\tawait api.topics.unlock(req, { tids: [req.params.tid] });\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.follow = async (req, res) => {\n\tawait api.topics.follow(req, req.params);\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.ignore = async (req, res) => {\n\tawait api.topics.ignore(req, req.params);\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.unfollow = async (req, res) => {\n\tawait api.topics.unfollow(req, req.params);\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.updateTags = async (req, res) => {\n\tconst payload = await api.topics.updateTags(req, {\n\t\ttid: req.params.tid,\n\t\ttags: req.body.tags,\n\t});\n\thelpers.formatApiResponse(200, res, payload);\n};\n\nTopics.addTags = async (req, res) => {\n\tconst payload = await api.topics.addTags(req, {\n\t\ttid: req.params.tid,\n\t\ttags: req.body.tags,\n\t});\n\n\thelpers.formatApiResponse(200, res, payload);\n};\n\nTopics.deleteTags = async (req, res) => {\n\tawait api.topics.deleteTags(req, { tid: req.params.tid });\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.getThumbs = async (req, res) => {\n\tlet { thumbsOnly } = req.query;\n\tthumbsOnly = thumbsOnly ? !!parseInt(thumbsOnly, 10) : false;\n\thelpers.formatApiResponse(200, res, await api.topics.getThumbs(req, { ...req.params, thumbsOnly }));\n};\n\nTopics.addThumb = async (req, res) => {\n\t// todo: move controller logic to src/api/topics.js\n\tawait api.topics._checkThumbPrivileges({ tid: req.params.tid, uid: req.user.uid });\n\n\tconst files = await uploadsController.uploadThumb(req, res); // response is handled here\n\n\t// Add uploaded files to topic zset\n\tif (files && files.length) {\n\t\tawait Promise.all(files.map(async (fileObj) => {\n\t\t\tawait topics.thumbs.associate({\n\t\t\t\tid: req.params.tid,\n\t\t\t\tpath: fileObj.url,\n\t\t\t});\n\t\t}));\n\t}\n};\n\nTopics.migrateThumbs = async (req, res) => {\n\tawait api.topics.migrateThumbs(req, {\n\t\tfrom: req.params.tid,\n\t\tto: req.body.tid,\n\t});\n\n\thelpers.formatApiResponse(200, res, await api.topics.getThumbs(req, { tid: req.body.tid }));\n};\n\nTopics.deleteThumb = async (req, res) => {\n\tif (!req.body.path.startsWith('http')) {\n\t\tawait middleware.assert.path(req, res, () => {});\n\t\tif (res.headersSent) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tawait api.topics.deleteThumb(req, {\n\t\ttid: req.params.tid,\n\t\tpath: req.body.path,\n\t});\n\thelpers.formatApiResponse(200, res, await topics.thumbs.get(req.params.tid));\n};\n\nTopics.reorderThumbs = async (req, res) => {\n\tconst { path, order } = req.body;\n\tawait api.topics.reorderThumbs(req, {\n\t\tpath,\n\t\torder,\n\t\t...req.params,\n\t});\n\n\thelpers.formatApiResponse(200, res, await topics.thumbs.get(req.params.tid));\n};\n\nTopics.getEvents = async (req, res) => {\n\tconst events = await api.topics.getEvents(req, { ...req.params });\n\n\thelpers.formatApiResponse(200, res, { events });\n};\n\nTopics.deleteEvent = async (req, res) => {\n\tawait api.topics.deleteEvent(req, { ...req.params });\n\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.markRead = async (req, res) => {\n\tawait api.topics.markRead(req, { ...req.params });\n\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.markUnread = async (req, res) => {\n\tawait api.topics.markUnread(req, { ...req.params });\n\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.bump = async (req, res) => {\n\tawait api.topics.bump(req, { ...req.params });\n\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.move = async (req, res) => {\n\tconst { cid } = req.body;\n\tawait api.topics.move(req, { cid, ...req.params });\n\n\thelpers.formatApiResponse(200, res);\n};\n\nTopics.userPin = async (req, res) => {\n\tconst payload = await api.topics.userPin(req, { pid: req.params.pid });\n\thelpers.formatApiResponse(200, res, payload);\n};\n\nTopics.userUnpin = async (req, res) => {\n\tconst payload = await api.topics.userUnpin(req, { pid: req.params.pid });\n\thelpers.formatApiResponse(200, res, payload);\n};\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"test/pins_spec.js":{"tests":[{"id":"0","name":"Pins data model (isolated) starts empty"},{"id":"1","name":"Pins data model (isolated) rejects non-privileged users"},{"id":"2","name":"Pins data model (isolated) instructor can pin up to MAX_PINS then errors"},{"id":"3","name":"Pins data model (isolated) idempotent add and removable"},{"id":"4","name":"Pins data model (isolated) validates numeric topic ids"},{"id":"5","name":"Pins data model (isolated) idempotent add returns without writing again"},{"id":"6","name":"Pins data model (isolated) admin can pin (without instructor group)"},{"id":"7","name":"Pins data model (isolated) uid <= 0 cannot pin/unpin"},{"id":"8","name":"Pins data model (isolated) getPinnedTids filters non-numeric values"}],"source":"'use strict';\n\n/* eslint-disable no-await-in-loop */\n\nconst assert = require('assert');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire').noCallThru(); // don't load real deps\n\ndescribe('Pins data model (isolated)', () => {\n\t// Simple in-memory fake DB\n\tlet store;\n\tconst dbStub = {\n\t\tgetSetMembers: async (k) => {\n\t\t\tconst s = store.get(k);\n\t\t\treturn s ? Array.from(s) : [];\n\t\t},\n\t\tsetAdd: async (k, v) => {\n\t\t\tconst s = store.get(k) || new Set();\n\t\t\ts.add(String(v));\n\t\t\tstore.set(k, s);\n\t\t},\n\t\tsetRemove: async (k, v) => {\n\t\t\tconst s = store.get(k) || new Set();\n\t\t\ts.delete(String(v));\n\t\t\tstore.set(k, s);\n\t\t},\n\t};\n\n\t// Stubs for auth/privileges\n\tlet privilegesStub;\n\tlet groupsStub;\n\n\t// Load the module-under-test with stubs injected\n\tlet pins;\n\n\tbeforeEach(() => {\n\t\tstore = new Map();\n\n\t\tprivilegesStub = {\n\t\t\tusers: {\n\t\t\t\tisAdministrator: sinon.stub().resolves(false),\n\t\t\t},\n\t\t};\n\n\t\tgroupsStub = {\n\t\t\tisMember: sinon.stub().resolves(false),\n\t\t};\n\n\t\tpins = proxyquire('../src/user/pins', {\n\t\t\t'../database': dbStub,\n\t\t\t'../groups': groupsStub,\n\t\t\t'../privileges': privilegesStub,\n\t\t});\n\t});\n\n\tafterEach(() => {\n\t\tsinon.restore();\n\t});\n\n\tit('starts empty', async () => {\n\t\tconst list = await pins.getPinnedTids(101);\n\t\tassert.deepStrictEqual(list, []);\n\t});\n\n\tit('rejects non-privileged users', async () => {\n\t\tawait assert.rejects(pins.addPinnedTid(101, 42), /Not authorized/);\n\t\tawait assert.rejects(pins.removePinnedTid(101, 42), /Not authorized/);\n\t});\n\n\tit('instructor can pin up to MAX_PINS then errors', async () => {\n\t\tgroupsStub.isMember.resolves(true);\n\t\tfor (let i = 1; i <= pins.MAX_PINS; i += 1) {\n\t\t\tconst list = await pins.addPinnedTid(101, i);\n\t\t\tassert.strictEqual(list.length, i);\n\t\t}\n\t\tconst current = await pins.getPinnedTids(101);\n\t\tassert.strictEqual(current.length, pins.MAX_PINS);\n\n\t\tawait assert.rejects(pins.addPinnedTid(101, 999), /Max pins/);\n\t});\n\n\tit('idempotent add and removable', async () => {\n\t\tgroupsStub.isMember.resolves(true);\n\n\t\tawait pins.addPinnedTid(101, 7);\n\t\tawait pins.addPinnedTid(101, 7); // no duplicate\n\t\tlet list = await pins.getPinnedTids(101);\n\t\tassert.deepStrictEqual(list, [7]);\n\n\t\tawait pins.removePinnedTid(101, 7);\n\t\tlist = await pins.getPinnedTids(101);\n\t\tassert.deepStrictEqual(list, []);\n\t});\n\n\tit('validates numeric topic ids', async () => {\n\t\tgroupsStub.isMember.resolves(true);\n\t\tawait assert.rejects(pins.addPinnedTid(101, 'NaN'), /Invalid topic id/);\n\t\tawait assert.rejects(pins.removePinnedTid(101, 'oops'), /Invalid topic id/);\n\t});\n\n\tit('idempotent add returns without writing again', async () => {\n\t\tgroupsStub.isMember.resolves(true);\n\t\tawait pins.addPinnedTid(101, 42);\n\t\tconst before = await pins.getPinnedTids(101);\n\t\t// Spy: setAdd should not be called when adding duplicate\n\t\tconst wrote = false;\n\t\tconst original = pins.__getDbSetAdd ? pins.__getDbSetAdd() : null; // ignore if you didn’t expose helpers\n\t\t// simpler: try to add again and assert the list unchanged\n\t\tconst after = await pins.addPinnedTid(101, 42);\n\t\tassert.deepStrictEqual(after, before);\n\t});\n  \n\tit('admin can pin (without instructor group)', async () => {\n\t\tprivilegesStub.users.isAdministrator.resolves(true);\n\t\tgroupsStub.isMember.resolves(false);\n\t\tconst out = await pins.addPinnedTid(101, 11);\n\t\tassert.deepStrictEqual(out, [11]);\n\t});\n  \n\tit('uid <= 0 cannot pin/unpin', async () => {\n\t\tawait assert.rejects(pins.addPinnedTid(0, 1), /Not authorized/);\n\t\tawait assert.rejects(pins.removePinnedTid(0, 1), /Not authorized/);\n\t});\n  \n\tit('getPinnedTids filters non-numeric values', async () => {\n\t\t// simulate DB pollution\n\t\tawait dbStub.setAdd(pins.keyFor(101), '5');\n\t\tawait dbStub.setAdd(pins.keyFor(101), 'abc');\n\t\tconst out = await pins.getPinnedTids(101);\n\t\tassert.deepStrictEqual(out, [5]); // 'abc' filtered out\n\t});\n});"}},"projectRoot":"/workspaces/NodeBB","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","packageManager":"npm","reporters":["html","clear-text","progress","json"],"testRunner":"mocha","coverageAnalysis":"perTest","mutate":["src/controllers/write/topics.js"],"ignorePatterns":["build/**","node_modules/**","coverage/**","public/**","vendor/**","logs/**","stryker-tmp/**","*.log"],"mochaOptions":{"spec":["test/pins_spec.js"]},"timeoutMS":30000,"tempDirName":"stryker-tmp","concurrency":2,"ignoreStatic":true,"disableTypeChecks":"{src,lib,test}/**/*.js","htmlReporter":{"fileName":"reports/mutation/index.html"},"jsonReporter":{"fileName":"reports/mutation/mutation-report.json"},"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"symlinkNodeModules":true,"cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[]},"framework":{"name":"StrykerJS","version":"9.2.0","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"9.2.0","mocha":"11.2.2","typescript":"5.9.2","webpack":"5.99.8"}}}